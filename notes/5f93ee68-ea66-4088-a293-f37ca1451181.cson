createdAt: "2019-11-12T13:46:27.772Z"
updatedAt: "2019-11-14T09:04:18.524Z"
type: "MARKDOWN_NOTE"
folder: "e23473b738c0b865b7d5"
title: "git分支管理"
tags: []
content: '''
  # git分支管理
  ## 基本分支操作
  ### 查看分支
  ```
  git branch
  ```
  ### 创建分支
  ```
  git branch <name>
  ```
  ### 切换分支
  ```
  git checkout <name>
  ```
  ### 创建+切换分支 
  ```
  git checkout -b <name>
  ```
  ### 合并某个分支到当前分支（默认用快速合并模式）
  ```
  git merge <name>
  ```
  ### 删除分支 
  ```
  git branch -d <name>
  ```
  
  ## 解决冲突
      如果两个分支上都对同一个文件进行了修改，并且都提交了修改，那么合并时就会产生冲突，
      这时要自己手动解决冲突，然后再进行提交
      
      如果在两个分支都进行了修改，但是没有冲突，那么使用git merge时，git会自动创建一个
      提交(commit)，需要做的只是写下commit的调校内容
  
  注意：有时尽管可以快速合并(fast-forward)，但是我们会禁用快速合并模式，强制生成一次提交
  ```
  git merge --no-ff -m"禁用fast-forward" new_branch
  ```
  
  ## 修复Bug
  遇到bug了，可以新建一个bug分支，修复后再删除分支，如果手头有正在做的事情，需要放下去修复Bug的，步骤如下：
  1. 使用`git stash`,将工作现场保存起来
  2. 切换到需要修复的Bug分支，然后创建新的Bug分支修复Bug，修好后，将Bug分支合并到主分支，然后删除Bug分支
  3. 回到刚刚的工作分区，使用`git stash list`列出保存的工作现场
  4. 使用`git stash pop`来恢复工作现场
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
