createdAt: "2019-10-26T02:49:15.027Z"
updatedAt: "2019-10-26T07:30:11.352Z"
type: "MARKDOWN_NOTE"
folder: "c37e1d68ae43af6fec7a"
title: "PyQuery"
tags: []
content: '''
  # PyQuery
  
  ## 初始化
  ### 字符串初始化
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  # 注意这里是CSS选择器，同之前的规则
  print(doc('li'))
  ```
  
  ### URL初始化
  ```
  from pyquery import PyQuery as pq
  doc = pq(url='http://www.baidu.com')
  print(doc('head'))
  ```
  ### 文件初始化
  ```
  from pyquery import PyQuery as pq
  doc = pq(filename='demo.html')
  print(doc('head'))
  ```
  
  ## 基本的CSS选择器
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  print(doc('#container .list li'))
  ```
  
  ## 查找元素
  ### 子元素
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  items = doc('.list')
  print(type(items)) # <class 'pyquery.pyquery.PyQuery'>
  print(items)
  lis = items.find('li')
  print(type(lis)) # <class 'pyquery.pyquery.PyQuery'>
  print(lis)
  ```
  **children()方法时查找直接的子元素，也可以添加CSS查找器**
  ```
  lis = items.children()
  lis = items.children('.active')
  print(type(lis))
  print(lis)
  ```
  ### 父元素
      items.parent()/items.parents()
      parents()可以传入参数，利用CSS选择器进行筛选
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  items = doc('.list')
  container = items.parent()
  print(type(container))
  print(container)
  ```
  
  ### 兄弟元素
  ```
  html = """
  <div id="container">
      <ul class="list">
          <li class="item-0">first item</li>
          <li class="item-1"><a href="link2.html">second item</a></li>
          <li class="item-0 active"><a href="link3.html"><span class="blod">third item</span></a></li>
          <li class="item-1 active"><a href="link4.html">fourth item</a></li>
          <li class="item-0><a href="link5.html">fifth item</a></li>
      </ul>
  </div>
  """
  
  from pyquery import PyQuery as pq
  doc = pq(html)
  li = doc('.list .item-0.active')
  print(li.siblings())
  ```
  **注意：** 以上CSS选择器中的参数，要写成`.list .item-0.active`0后面不要空格，只用.
  
  ### items()方法产生生成器
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  lis = doc('li').items()
  print(type(lis))
  for li in lis:
      print(li)
  ```
  ## 获取信息
  ### 获取属性
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  a = doc('.item-0.active a')
  print(a)
  # 以下两种是一致的
  print(a.attr('href'))
  print(a.attr.href)
  ```
  ### 获取文本
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  a = doc('.item-0.active a')
  print(a)
  print(a.text())
  ```
  ### 获取html
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  a = doc('.item-0.active a')
  print(a)
  print(a.html())
  ```
  
  ## DOM操作
  ### addClass,removeClass
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  li = doc('.item-0.active')
  print(li)
  li.removeClass('active')
  print(li)
  li.addClass('active')
  print(li)
  ```
  ### attr,css
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  li = doc('.item-0.active')
  print(li)
  li.attr('name','link')
  print(li)
  li.css('font-size','14px')
  print(li)
  ```
  ### remove
  ```
  from pyquery import PyQuery as pq
  doc = pq(html2)
  wrap = doc('.wrap')
  print(wrap.text())
  wrap.find('p').remove()
  print(wrap.text())
  ```
  ## 其他的DOM方法
  [**DOM官方文档**](https://pyquery.readthedocs.io/en/latest/api.html)
  
  ## 伪类选择器
  ```
  from pyquery import PyQuery as pq
  doc = pq(html)
  li = doc('li:first-child')
  print(li)
  li = doc('li:last-child')
  print(li)
  li = doc('li:nth-child(3)')
  print(li)
  # gt(2)表示获取2以后的，这个索引是从0开始的，所以是获取第四个及之后的
  li = doc('li:gt(2)')
  print(li)
  li = doc('li:nth-child(2n)')
  print(li)
  li = doc('li:contains(second)')
  print(li)
  ```
  
  更多的CSS选择器可以查看 http://www.w3school.com.cn/css/index.asp
'''
linesHighlighted: []
isStarred: false
isTrashed: false
